
Largest Rectangle in Histogram -
Link - https://leetcode.com/problems/largest-rectangle-in-histogram/

1) Brute Force -
TLE (Passes 87/98)
T.C. - O(n^2)

class Solution {
public:
    int largestRectangleArea(vector<int>& ht) {
        int ans=INT_MIN;
        int n=ht.size();
        for(int i=0;i<n;i++)
        {
            int left=0,right=n-1;
            for(int j=i;j>=0;j--)
            {  
                if(ht[j]<ht[i])
                {
                    left=j+1;
                    break;
                }
            }
            
            for(int j=i;j<n;j++)
            {
                if(ht[j]<ht[i])
                {
                    right=j-1;
                    break;
                }
            }
            ans=max(ans,(right-left+1)*ht[i]);
        }
      return ans;  
    }
};

2) Two Pass -
T.C. - O(n)+O(n)
S.C. - O(n)+O(n)

class Solution {
public:
    int largestRectangleArea(vector<int>& ht) {
        int n=ht.size();
        int ans=INT_MIN;
        stack<int> st;
        vector<int> l(n),r(n);
        for(int i=0;i<n;i++)
        {
            while(!st.empty() && ht[st.top()] >= ht[i])
            {
                st.pop();
            }
            if(st.empty())
            {
                l[i]=0;
            }
            else
            {
                l[i]=st.top()+1;
            }
            st.push(i);
        }
        
        while(!st.empty())
        {
            st.pop();
        }
        
        for(int i=n-1;i>=0;i--)
        {
            while(!st.empty() && ht[st.top()]>= ht[i])
            {
                st.pop();
            }
           if(st.empty())
            {
                r[i]=n-1;
            }
            else
            {
                r[i]=st.top()-1;
            } 
           st.push(i); 
        }
        
        for(int i=0;i<n;i++)
        {
            ans=max(ans,ht[i]*(r[i]-l[i]+1));
        }
       return ans; 
    }
};

3) One Pass -
T.C. - O(n)+O(n)
S.C. - O(n)

class Solution {
public:
    int largestRectangleArea(vector<int>& ht) {
        int n=ht.size();
        stack<int> st;
        int ans=INT_MIN;
        for(int i=0;i<=n;i++)
        {
            while(!st.empty() && (i==n || ht[st.top()]>ht[i]))
            {
                int h = ht[st.top()];
                st.pop();
                int w;
                if(st.empty())
                {
                    w=i;
                }
                else
                {
                    w=i-st.top()-1;
                }
               ans=max(ans,w*h); 
            }
           st.push(i); 
        }
      return ans;  
    }
};
